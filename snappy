#!/usr/bin/env python
#=====================================================================================
# Chad Kerner, Senior Systems Engineer
# Storage Enabling Technologies
# National Center for Supercomputing Applications
# ckerner@illinois.edu     chad.kerner@gmail.com
#=====================================================================================
#
# This snapshot utility manages our SpectrumScale snapshots.                
#
# Requirements: This requires the ssapi python module from github.  It can be found
#               at: https://github.com/ckerner/ssapi
#
# This was written in Python 2.7 with Spectrum Scale 4.2.  That is what we currently
# have and so that is what I will keep it updated with until other needs arise.
#
# There is NO support, use it at your own risk.  
#
# If you find a bug, fix it.  Then send me the diff and I will merge it into the code.
#
# You may want to pull often because this is being updated quite frequently as our
# needs arise in our clusters.
#
#=====================================================================================


from __future__ import print_function
from ssapi import *
from subprocess import Popen, PIPE
import logging
import sys
import re
import os
import shlex
import argparse
import configparser
from datetime import datetime , date
from pprint import pprint


LOG_FILENAME = { 'h' : '/var/log/snapshots/hourly.log',
                 'd' : '/var/log/snapshots/daily.log',
                 'w' : '/var/log/snapshots/weekly.log',
                 'm' : '/var/log/snapshots/monthly.log',
                 'q' : '/var/log/snapshots/quarterly.log',
                 'y' : '/var/log/snapshots/yearly.log',
                 '0' : '/var/log/snapshots/monday.log',
                 '1' : '/var/log/snapshots/tuesday.log',
                 '2' : '/var/log/snapshots/wednesday.log',
                 '3' : '/var/log/snapshots/thursday.log',
                 '4' : '/var/log/snapshots/friday.log',
                 '5' : '/var/log/snapshots/saturday.log',
                 '6' : '/var/log/snapshots/sunday.log',
               }

SNAP_FREQUENCY = { 'h' : 'Hourly',    'd' : 'Daily',
                   'w' : 'Weekly',    'm' : 'Monthly',
                   'q' : 'Quarterly', 'y' : 'Yearly',
                   '0' : 'Monday',    '1' : 'Tuesday',
                   '2' : 'Wednesday', '3' : 'Thursday',
                   '4' : 'Friday',    '5' : 'Saturday',
                   '6' : 'Sunday'
                 }

def parse_options():
    """
    Parse the command line options.
    """
    global parser
    parser = argparse.ArgumentParser(
       prog = 'snappy',
       description = 'Spectrum Scale Snapshot Wrapper',
       epilog = 'This requires GPFS to be installed in the default location.'
    )
    parser.add_argument('--audit', dest='audit', action='store_true', default=False,
                        help='Perform an audit to compare actual snapshots to the configuration.')
    parser.add_argument('--report', dest='report', action='store_true', default=False,
                        help='Generate a report about the current snapshot configuration.')
    parser.add_argument('--cron', dest='cron', action='store_const', const='h',
                        help='Generate the crontab entries to run all of the snapshots.')
    parser.add_argument('--hourly', dest='snap_freq', action='store_const', const='h',
                        help='Generate HOURLY snapshots.')
    parser.add_argument('--daily', dest='snap_freq', action='store_const', const='d',
                        help='Generate DAILY snapshots.')
    parser.add_argument('--dow', dest='snap_freq', action='store_const', const='dow',
                        help='Generate DAY OF WEEK snapshots.')
    parser.add_argument('--weekly', dest='snap_freq', action='store_const', const='w',
                        help='Generate WEEKLY snapshots.')
    parser.add_argument('--monthly', dest='snap_freq', action='store_const', const='m',
                        help='Generate MONTHLY snapshots.')
    parser.add_argument('--quarterly', dest='snap_freq', action='store_const', const='q',
                        help='Generate QUARTERLY snapshots.')
    parser.add_argument('--yearly', dest='snap_freq', action='store_const', const='y',
                        help='Generate YEARLY snapshots.')
    parser.add_argument('-v','--verbose', dest='verbose', action='store_true', default=False,
                        help='Toggle Verbose Mode. DEFAULT: %(default)s')
    parser.add_argument('-d','--debug', dest='debug', action='store_true', default=False,
                        help='Toggle Debug Mode. DEFAULT: %(default)s')
    parser.add_argument('-t','--trace', dest='trace', action='store_true', default=False,
                        help='Toggle Debug Mode. DEFAULT: %(default)s')
    parser.add_argument('-n', dest='dryrun', action='store_true', default=False,
                        help='Do not actually run, but log what would be done. Implies debug option. DEFAULT: %(default)s')

    args = parser.parse_args()
    if args.dryrun:
        args.debug = True

    if not args.snap_freq:
       args.snap_freq = 'd'

    return args


def setup_logging():
   """
   Configure how logging is going to be done.  DEBUG is very verbose.
   """
   if args.debug:
      loglvl = logging.DEBUG
   else:
      loglvl = logging.INFO

   if args.trace:
      logging.basicConfig( level = loglvl,
                    format = '%(asctime)s %(levelname)s %(funcName)s:%(lineno)s %(message)s',
                    datefmt = '%Y%m%d_%H%M%S',
                    filename = LOG_FILENAME[args.snap_freq] )
   else:
      logging.basicConfig( level = loglvl,
                    format = '%(asctime)s %(levelname)s  %(message)s',
                    datefmt = '%Y%m%d_%H%M%S',
                    filename = LOG_FILENAME[args.snap_freq] )


def generate_crontab():
    """
    Generate all of the crontab entries for this utility to run.
    """
    script_path = os.path.abspath(__file__)

    print("# Perform SpectrumScale hourly Snapshots")
    print("00 * * * * {} --hourly\n".format(script_path))
    print("# Perform SpectrumScale daily Snapshots")
    print("02 00 * * * {} --daily\n".format(script_path))
    print("# Perform SpectrumScale weekly Snapshots")
    print("02 00 * * * {} --weekly\n".format(script_path))
    print("# Perform SpectrumScale monthly Snapshots")
    print("02 00 * * * {} --monthly\n".format(script_path))
    print("# Perform SpectrumScale quarterly Snapshots")
    print("02 00 * * * {} --quarterly\n".format(script_path))
    print("# Perform SpectrumScale yearly Snapshots")
    print("02 00 * * * {} --yearly\n".format(script_path))
    print("# Perform SpectrumScale Weekday Snapshots")
    print("02 00 * * * {} --dow\n".format(script_path))


def create_default_configuration( cfgfile ):
    """
    Creates the default snapshot configuration file if it does not already exist.
    """
    f = open( cfgfile, 'w' )
    f.write("[DEFAULT]\n")
    f.write("Active=False\n")
    f.write("SnapType=Filesystem\n")
    f.write("Versions=30\n")
    f.write("Frequency=daily\n\n")
    f.close()


def does_file_exist( fqpn ):
    """
    Check to see if the fully qualified filename exists.
    """
    file_exist = os.path.isfile( fqpn )
    return file_exist


def filesystem_snapshot( myFS, cfg ):
    """
    Generate a snapshot for the file system.
    """
    logging.info("    Snapshot Type: {}   Frequence: {}   Versions: {}   Active: {}".format(
           cfg.get('DEFAULT', 'snaptype'),
           cfg.get('DEFAULT', 'frequency'),
           cfg.get('DEFAULT', 'versions'),
           cfg.get('DEFAULT', 'active') ) )

    # If snapshots at the filesystem level are not active for this file system, return.
    if cfg.get('DEFAULT', 'active') == 'False':
       return

    # Collect the snapshot information
    mySnap = Snapshots( myFS.gpfsdev )

    # Create a new snapshot.
    mySnap.snap()

    # This will collect a list of snapthots that need to be purged based on how many are
    # specified in the retention policy and then purge the expired ones.
    for oldSnap in mySnap.get_delete_list( int(cfg.get('DEFAULT', 'versions')) ):
        logging.info("Removing Snapshot: {} {}".format( myFS.gpfsdev, oldSnap ))
        if not args.dryrun:
           mySnap.delsnap( oldSnap )


def fileset_audit( myFS, cfg ):
    """
    Audit the snapshot process. 
    """

    # Load the default configuration into a dictionary.
    snapcfg = {}
    snapcfg['DEFAULT'] = { k:v for k,v in cfg.items('DEFAULT') }

    # Print the header line.
    print("{0:<8s}  {1:<40s}  {2:<10s}  {3:>10s}".format('Device', 'Fileset', 'Configured', 'Actual'))

    # For all of the filesets in the specified filesystem, check to see if snapshots should occur
    for fileset in myFS.fileset_list():
        # You can only snapshot independent inode filesets.
        if not myFS.independent_inode_fileset( fileset ):
           print("{0:<8s}  {1:<40s}  {2:>10s}  {3:>10s}".format(myFS.gpfsdev, fileset, 'Dependent', 'N/A'))
           continue

        mycfg = snapcfg['DEFAULT'].copy()

        # If the fileset has a section in the config file, get its values
        if fileset in cfg.sections():
           fscfg = {}
           fscfg = { k:v for k,v in cfg.items(fileset) }

           # Overwrite the defaults with the section specific values
           mycfg.update( fscfg )

        # Get the fileset snapshot information
        mySnap = Snapshots( myFS.gpfsdev, fileset )

        # If the config is not marked active, skip the fileset
        if mycfg['active'] != 'True':
           print("{0:<8s}  {1:<40s}  {2:>10s}  {3:>10d}".format(myFS.gpfsdev, fileset, 'Inactive', int(mySnap.snap_count)))
           continue

        print("{0:<8s}  {1:<40s}  {2:>10d}  {3:>10d}".format( myFS.gpfsdev, fileset, int(mycfg['versions']), int(mySnap.snap_count)))


def fileset_snapshot( myFS, cfg ):
    """
    Generate a fileset snapshot.
    """

    # Load the default configuration into a dictionary.
    snapcfg = {}
    snapcfg['DEFAULT'] = { k:v for k,v in cfg.items('DEFAULT') }

    logging.info("    Default Snapshot Configuration: {}   Frequence: {}   Versions: {}   Active: {}".format(
           cfg.get('DEFAULT', 'snaptype'),
           cfg.get('DEFAULT', 'frequency'),
           cfg.get('DEFAULT', 'versions'),
           cfg.get('DEFAULT', 'active') ) )

    # For all of the filesets in the specified filesystem, check to see if snapshots should occur
    for fileset in myFS.fileset_list():
        # You can only snapshot independent inode filesets.
        if not myFS.independent_inode_fileset( fileset ):
           logging.info("    Skipping Dependent Inode Fileset: {}::{}.".format(myFS.gpfsdev, fileset))
           continue

        mycfg = snapcfg['DEFAULT'].copy()

        # If the fileset has a section in the config file, get its values
        if fileset in cfg.sections():
           fscfg = {}
           fscfg = { k:v for k,v in cfg.items(fileset) }

           # Overwrite the defaults with the section specific values 
           mycfg.update( fscfg )

        # If the config is not marked active, skip the fileset
        if mycfg['active'] != 'True':
           logging.info("    Skipping Inependent Inode Fileset: {}::{}.  Snapshots inactive.".format(myFS.gpfsdev, fileset))
           continue

        # If the config is active and number of versions is set to 0, skip the fileset.
        if mycfg['versions'] == 0:
           logging.info("    Skipping Inependent Inode Fileset: {}::{}.  0 Versions Specified.".format(myFS.gpfsdev, fileset))
           continue

        if mycfg['frequency'] != SNAP_FREQUENCY[args.snap_freq].lower():
           logging.info("    Inependent Inode Fileset Found: {}::{} . Frequency Mismatch: File: {} Command: {}.".format(
                  myFS.gpfsdev,
                  fileset,
                  mycfg['frequency'],
                  SNAP_FREQUENCY[args.snap_freq].lower()))
           continue

        logging.info("    Creating Snapshot: {}::{}".format(myFS.gpfsdev, fileset))

        # Get the fileset snapshot information
        mySnap = Snapshots( myFS.gpfsdev, fileset )

        # Create a new snapshot for the fileset.
        mySnap.snap()

        # If there are old snapshots that need to be removed, purge them.
        for oldSnap in mySnap.get_delete_list( int(mycfg['versions']) ):
            logging.info("    Removing Expired Snapshot: {}::{}::{}".format(myFS.gpfsdev, fileset, oldSnap ))
            if not args.dryrun:
               mySnap.delsnap( oldSnap )

def generate_report( my_cluster ):
    for gpfsdev in my_cluster.gpfsdevs:
        logging.debug("Get fs for report: {}".format(gpfsdev))
        myFS = Filesystem( gpfsdev )

        cfgfile = myFS.filesys['defaultMountPoint'] + '/.snapcfg'

        cfg = configparser.ConfigParser()
        cfg.read( cfgfile )

        sections = list( cfg.sections() )

        print("{:11s}  {:10s}  {:30s}  {:6s}  {:9s}  {:>8s}".format( 'GPFS Device', 'Snap Type', 'Fileset', 'Active', 'Frequency', 'Versions' ) )
                                              
        print("{:11s}  {:10s}  {:30s}  {:6s}  {:9s}  {:>8s}".format( gpfsdev, 
           cfg.get( 'DEFAULT', 'snaptype' ),
           'DEFAULT',
           cfg.get( 'DEFAULT', 'active' ),
           cfg.get( 'DEFAULT', 'frequency' ),
           cfg.get( 'DEFAULT', 'versions' ) ) )

        for section in sorted( sections ):
            if section == 'DEFAULT':
               continue
            print("{:11s}  {:10s}  {:30s}  {:6s}  {:9s}  {:>8s}".format( gpfsdev, 
               cfg.get( section, 'snaptype' ),
               section, 
               cfg.get( section, 'active' ),
               cfg.get( section, 'frequency' ),
               cfg.get( section, 'versions' ) ) )

if __name__ == "__main__":
   args = parse_options()

   if args.cron:
      generate_crontab()
      sys.exit()

   setup_logging()

   logging.debug("Getting Cluster Information")
   my_cluster = Cluster( args.debug )
   logging.debug("Got Cluster Information")

   if args.report:
      generate_report( my_cluster )
      sys.exit()

   # Only run snapshots on the cluster manager node
   if my_cluster.is_cluster_manager == False:
      logging.debug("This server is not the cluster manager.")
      sys.exit()
   else:
      logging.debug("This server is the cluster manager.")

   for gpfsdev in my_cluster.gpfsdevs:
       logging.debug("Get fs: {}".format(gpfsdev))
       myFS = Filesystem( gpfsdev )

       if args.audit:
          print("Starting Audit: Device: {}  Mount point: {}\n".format(gpfsdev, myFS.filesys['defaultMountPoint'] ))
       else:
          logging.info("Starting Snapshot: Device: {}  Mount point: {}".format(gpfsdev, myFS.filesys['defaultMountPoint'] ))
       cfgfile = myFS.filesys['defaultMountPoint'] + '/.snapcfg'

       if does_file_exist( cfgfile ) == False:
          logging.info("Config Missing: File: {} not found. Creating default now.".format(cfgfile))
          create_default_configuration( cfgfile )

       cfg = configparser.ConfigParser()
       cfg.read( cfgfile )

       if cfg.get('DEFAULT', 'snaptype') == 'Filesystem':
          filesystem_snapshot( myFS, cfg )
       elif cfg.get('DEFAULT', 'snaptype') == 'Fileset':
          if args.audit:
             fileset_audit( myFS, cfg )
          else:
             fileset_snapshot( myFS, cfg )
       else:
             logging.info("   Snapshot Error:  Invalid Snapshot Type: {}".format( cfg.get('DEFAULT', 'snaptype') ) )

       if args.audit:
          print("Audit Complete: Device: {}  Mount point: {}\n".format(gpfsdev, myFS.filesys['defaultMountPoint'] ))
       else:
          logging.info("Snapshot Complete: Device: {}  Mount point: {}".format(gpfsdev, myFS.filesys['defaultMountPoint'] ))

       try:
          del myFS
          del cfgfile
          del cfg
       except NameError:
          pass


